{"version":3,"sources":["init.js"],"names":["EventEmitter","callbacks","base","_names","callback","that","console","warn","resolveNames","forEach","_name","name","resolveName","namespace","Object","value","Array","push","keys","length","_args","finalResult","result","args","apply","names","replace","split","newName","parts","original","Time","start","Date","now","current","elapsed","delta","tick","bind","ticker","window","requestAnimationFrame","world","step","eventHandler","trigger","renderer","render","scene","camera","instance","cancelAnimationFrame","time"],"mappings":"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","file":"init.3fbf5238.js","sourceRoot":"../src","sourcesContent":["// import EventEmitter from './js/Utils/EventEmitter.js'\nclass EventEmitter\n{\n    /**\n     * Constructor\n     */\n    constructor()\n    {\n        this.callbacks = {}\n        this.callbacks.base = {}\n    }\n\n    /**\n     * On\n     */\n    on(_names, callback)\n    {\n        const that = this\n        // Errors\n        if(typeof _names === 'undefined' || _names === '')\n        {\n            console.warn('wrong names')\n            return false\n        }\n\n        if(typeof callback === 'undefined')\n        {\n            console.warn('wrong callback')\n            return false\n        }\n\n        // Resolve names\n        const names = this.resolveNames(_names)\n\n        // Each name\n        names.forEach(function(_name)\n        {\n            // Resolve name\n            const name = that.resolveName(_name)\n\n            // Create namespace if not exist\n            if(!(that.callbacks[ name.namespace ] instanceof Object))\n                that.callbacks[ name.namespace ] = {}\n\n            // Create callback if not exist\n            if(!(that.callbacks[ name.namespace ][ name.value ] instanceof Array))\n                that.callbacks[ name.namespace ][ name.value ] = []\n\n            // Add callback\n            that.callbacks[ name.namespace ][ name.value ].push(callback)\n        })\n        return this\n    }\n\n    /**\n     * Off\n     */\n    off(_names)\n    {\n        const that = this\n\n        // Errors\n        if(typeof _names === 'undefined' || _names === '')\n        {\n            console.warn('wrong name')\n            return false\n        }\n\n        // Resolve names\n        const names = this.resolveNames(_names)\n\n        // Each name\n        names.forEach(function(_name)\n        {\n            // Resolve name\n            const name = that.resolveName(_name)\n\n            // Remove namespace\n            if(name.namespace !== 'base' && name.value === '')\n            {\n                delete that.callbacks[ name.namespace ]\n            }\n\n            // Remove specific callback in namespace\n            else\n            {\n                // Default\n                if(name.namespace === 'base')\n                {\n                    // Try to remove from each namespace\n                    for(const namespace in that.callbacks)\n                    {\n                        if(that.callbacks[ namespace ] instanceof Object && that.callbacks[ namespace ][ name.value ] instanceof Array)\n                        {\n                            delete that.callbacks[ namespace ][ name.value ]\n\n                            // Remove namespace if empty\n                            if(Object.keys(that.callbacks[ namespace ]).length === 0)\n                                delete that.callbacks[ namespace ]\n                        }\n                    }\n                }\n\n                // Specified namespace\n                else if(that.callbacks[ name.namespace ] instanceof Object && that.callbacks[ name.namespace ][ name.value ] instanceof Array)\n                {\n                    delete that.callbacks[ name.namespace ][ name.value ]\n\n                    // Remove namespace if empty\n                    if(Object.keys(that.callbacks[ name.namespace ]).length === 0)\n                        delete that.callbacks[ name.namespace ]\n                }\n            }\n        })\n\n        return this\n    }\n\n    /**\n     * Trigger\n     */\n    trigger(_name, _args)\n    {\n        // Errors\n        if(typeof _name === 'undefined' || _name === '')\n        {\n            console.warn('wrong name')\n            return false\n        }\n        \n\n        const that = this\n        let finalResult = null\n        let result = null\n\n        // Default args\n        const args = !(_args instanceof Array) ? [] : _args\n\n        // Resolve names (should on have one event)\n        let name = this.resolveNames(_name)\n\n        // Resolve name\n        name = this.resolveName(name[ 0 ])\n\n        // Default namespace\n        if(name.namespace === 'base')\n        {\n            // Try to find callback in each namespace\n            for(const namespace in that.callbacks)\n            {\n                if(that.callbacks[ namespace ] instanceof Object && that.callbacks[ namespace ][ name.value ] instanceof Array)\n                {\n                    that.callbacks[ namespace ][ name.value ].forEach(function(callback)\n                    {\n                        result = callback.apply(that, args)\n\n                        if(typeof finalResult === 'undefined')\n                        {\n                            finalResult = result\n                        }\n                    })\n                }\n            }\n        }\n\n        // Specified namespace\n        else if(this.callbacks[ name.namespace ] instanceof Object)\n        {\n            if(name.value === '')\n            {\n                console.warn('wrong name')\n                return this\n            }\n\n            that.callbacks[ name.namespace ][ name.value ].forEach(function(callback)\n            {\n                result = callback.apply(that, args)\n\n                if(typeof finalResult === 'undefined')\n                    finalResult = result\n            })\n        }\n\n        return finalResult\n    }\n\n    /**\n     * Resolve names\n     */\n    resolveNames(_names)\n    {\n        let names = _names\n        names = names.replace(/[^a-zA-Z0-9 ,/.]/g, '')\n        names = names.replace(/[,/]+/g, ' ')\n        names = names.split(' ')\n\n        return names\n    }\n\n    /**\n     * Resolve name\n     */\n    resolveName(name)\n    {\n        const newName = {}\n        const parts = name.split('.')\n\n        newName.original  = name\n        newName.value     = parts[ 0 ]\n        newName.namespace = 'base' // Base namespace\n\n        // Specified namespace\n        if(parts.length > 1 && parts[ 1 ] !== '')\n        {\n            newName.namespace = parts[ 1 ]\n        }\n\n        return newName\n    }\n}\n\n\n\n// import Time from './js/Utils/Time.js'\n\n\nclass Time\n{\n    /**\n     * Constructor\n     */\n    constructor()\n    {\n        this.start = Date.now()\n        this.current = this.start\n        this.elapsed = 0\n        this.delta = 16\n\n        this.tick = this.tick.bind(this)\n    }\n\n    /**\n     * Tick\n     */\n    tick()\n    {\n        this.ticker = window.requestAnimationFrame(this.tick)\n\n        const current = Date.now()\n\n        this.delta = current - this.current\n        this.elapsed = current - this.start\n        this.current = current\n\n        if(this.delta > 60)\n        {\n            this.delta = 60\n        }\n\n        world.step(1/60, this.delta, 3)\n        eventHandler.trigger('tick')\n        renderer.render(scene, camera.instance)\n    }\n\n    /**\n     * Stop\n     */\n    stop()\n    {\n        window.cancelAnimationFrame(this.ticker)\n    }\n}\n\n\n\neventHandler = new EventEmitter()\ntime = new Time();"]}